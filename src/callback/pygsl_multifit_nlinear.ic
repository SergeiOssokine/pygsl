/* -*- C -*- */
#include "pygsl_multifit_nlinear.h"
#include <Python.h>

static int
PyMODULEWRAP(callback_df)(const gsl_vector * x, void * param, gsl_matrix *J)
{
	PyObject *object=NULL, * callback = NULL;
	PyMODULEWRAP(params) * t_params;
	PyGSL_error_info  info;
	int status = GSL_EFAILED, status2 = GSL_EFAILED, trb_lineno = __LINE__;

	FUNC_MESS_BEGIN();
	
	assert(param != NULL);
	t_params = (PyMODULEWRAP(params) *) param;
	callback = t_params->df;

	status = PyMODULEWRAP(callback_obj_intern)(callback, x, param, &object);
	switch(status){
	case GSL_SUCCESS:
		break;
	default:
		trb_lineno = __LINE__ - 5;
		goto fail;
	}
	
	info.callback = callback;
	info.message  = __FUNCTION__;
	info.error_description = NULL;
	info.argnum = 1;
	status2 = PyGSL_copy_pyarray_to_gslmatrix(J, object, J->size1, J->size2, &info);
	if(status2 != GSL_SUCCESS){
		trb_lineno = __LINE__ - 1;
		status = status2;
		goto fail;
	}     
	Py_DECREF(object);
	gsl_matrix_get(J, 0, 0);
	if (J->size1 >= 2 && J->size2 >= 2){
		DEBUG_MESS(2, "\t J[0, 0] = %g\t J[0, 1] =%g\n"
			   "\t\t J[1, 0] = %g\t J[1, 1] =%g",
			   gsl_matrix_get(J, 0, 0),  gsl_matrix_get(J, 0, 1),
			   gsl_matrix_get(J, 1, 0),  gsl_matrix_get(J, 1, 1)
			   );
	}
	object = NULL;
	FUNC_MESS_END();
	return status;
     
 fail:
	PyGSL_add_traceback(NULL, __FILE__, __FUNCTION__, trb_lineno);
	FUNC_MESS_FAILED();
	Py_XDECREF(object);
	return status;
}

static PyObject *
PyMODULEWRAP(covar_intern)(const gsl_matrix *J, const double epsrel,
			     const PyGSL_array_index_t p)
{
    PyArrayObject * covar_a = NULL;
    PyGSL_array_index_t dimensions[2];
    gsl_matrix_view covar;
    int status = GSL_EFAILED, line = __LINE__;

    dimensions[0] = dimensions[1] = p;
    /* dimensions[1] = p; */
    covar_a = (PyArrayObject *) PyGSL_New_Array(2, dimensions, NPY_DOUBLE);
    if(covar_a == NULL){
      line = __LINE__ - 2;
      goto fail;
    }

    covar = gsl_matrix_view_array((double *) PyArray_DATA(covar_a),
			      PyArray_DIM(covar_a, 0), PyArray_DIM(covar_a, 1));
    status = MODULEWRAP(covar)(J, epsrel, &covar.matrix);
    switch(status){
      case GSL_SUCCESS:
	break;
      default:
	line = __LINE__ - 6;
	goto fail;
    }

    return (PyObject *) covar_a;
    
  fail:    
    PyGSL_add_traceback(pygsl_multifit_nlinear_module, __FILE__, __FUNCTION__, line);
    PyGSL_error_flag(status);
    Py_XDECREF(covar_a);
    return NULL;
}



static PyObject *
PyMODULEWRAP(covar)(const gsl_matrix *J, const double epsrel, const long p)
{
	const PyGSL_array_index_t p_a = p;
	return PyMODULEWRAP(covar_intern)(J, epsrel, p_a);
}

#include "pygsl_multifit_nlinear_generic.ic"

/*
 * c-set-style: python
 */
