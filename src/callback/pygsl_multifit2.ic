/* -*- C -*- */
#include <pygsl/block_helpers.h>
#include <gsl/gsl_vector.h>
#include <gsl/gsl_matrix.h>

static int
pygsl_new_vector(PyGSL_array_index_t dim, PyArrayObject **a, gsl_vector_view *v)
{
	PyArrayObject *obj = NULL;
	int line = __LINE__, status = PyGSL_ANY;
	PyGSL_array_index_t test;
	
	FUNC_MESS_BEGIN();
	obj = PyGSL_New_Array(1, &dim, NPY_DOUBLE);
	if(!obj){
		line = __LINE__ - 1;
		goto fail;
	}
	status = PyGSL_stride_recalc(PyArray_STRIDE(obj, 0), sizeof(double), &test);
	if(status != GSL_SUCCESS){
		line = __LINE__ - 1;
		goto fail;
	}
	FUNC_MESS_END();
	*a = obj;
	*v = gsl_vector_view_array_with_stride((double *) PyArray_DATA(obj), test, PyArray_DIM(obj, 0));
	return GSL_SUCCESS;
  fail:
	FUNC_MESS_FAILED();
	PyGSL_add_traceback(pygsl_multifit2_module, __FILE__, __FUNCTION__, line);
	Py_XDECREF(obj);
	return status;
}

static int
pygsl_new_matrix(PyGSL_array_index_t *dims, PyArrayObject **a, gsl_matrix_view *m)
{
	PyArrayObject *obj = NULL;
	int line = __LINE__, status = PyGSL_ANY;
	PyGSL_array_index_t stride1, stride2;
	
	FUNC_MESS_BEGIN();
	
	obj = PyGSL_New_Array(2, dims, NPY_DOUBLE);
	if(!obj){
		line = __LINE__ - 1;
		goto fail;
	}
	status = PyGSL_stride_recalc(PyArray_STRIDE(obj, 0), sizeof(double), &stride1);
	if(status != GSL_SUCCESS){
		line = __LINE__ - 1;
		goto fail;
	}
	status = PyGSL_stride_recalc(PyArray_STRIDE(obj, 1), sizeof(double), &stride2);
	if(status != GSL_SUCCESS){
		line = __LINE__ - 1;
		goto fail;
	}
	FUNC_MESS_END();
	
	*a = obj;
	*m = gsl_matrix_view_array((double *) PyArray_DATA(obj), PyArray_DIM(obj, 0), PyArray_DIM(obj, 1));
	return GSL_SUCCESS;
	
  fail:
	FUNC_MESS_FAILED();
	PyGSL_add_traceback(pygsl_multifit2_module, __FILE__, __FUNCTION__, line);       
	Py_XDECREF(obj);
	return status;
}

static int
pygsl_multifit2_build_c_cov(const size_t p,
			    PyArrayObject **c, gsl_vector_view *c_v,
			    PyArrayObject **cov, gsl_matrix_view *c_m)
{

	PyGSL_array_index_t dim[2];
	int line = __LINE__, status = PyGSL_ANY;
	
	FUNC_MESS_BEGIN();
	status = pygsl_new_vector(p, c, c_v);
	if(status != GSL_SUCCESS){
		line  = __LINE__ - 2;
		goto fail;
	}
	
	dim[0] = dim[1] = p;
	status = pygsl_new_matrix(dim, cov, c_m);
	if(status != GSL_SUCCESS){
		line  = __LINE__ - 2;
		goto fail;
	}

	FUNC_MESS_END();
	return GSL_SUCCESS;
	
  fail:
	FUNC_MESS_FAILED();
	PyGSL_add_traceback(pygsl_multifit2_module, __FILE__, __FUNCTION__, line);       
	Py_XDECREF(c);
	Py_XDECREF(cov);
	return status;
}


static PyObject *
pygsl_multifit2_linear_or_w(const gsl_matrix *X,  const gsl_vector *w, const gsl_vector *y,
			    gsl_multifit_linear_workspace * self)
{
    
	PyObject * ret = NULL;
	PyArrayObject *c = NULL, *cov = NULL;
	gsl_vector_view c_v;
	gsl_matrix_view cov_m;
	double chisq;
	int line = __LINE__, status = PyGSL_ANY;
		
	FUNC_MESS_BEGIN();
	
	status = pygsl_multifit2_build_c_cov(self->p, &c, &c_v,  &cov, &cov_m);
	if(status != GSL_SUCCESS){
		line  = __LINE__ - 2;
		goto fail;
	}

	if(w){	
		status = gsl_multifit_wlinear(X, w, y, &c_v.vector, &cov_m.matrix, &chisq, self);
		if(status != GSL_SUCCESS){
			line  = __LINE__ - 2;
			goto fail;
		}
	} else {
		status = gsl_multifit_linear(X, y, &c_v.vector, &cov_m.matrix, &chisq, self);
		if(status != GSL_SUCCESS){
			line  = __LINE__ - 2;
			goto fail;
		}
	}
	ret = Py_BuildValue("OOd", c, cov, chisq);
	FUNC_MESS_END();
	return ret;
    
  fail:
	FUNC_MESS_FAILED();
	PyGSL_add_traceback(pygsl_multifit2_module, __FILE__, __FUNCTION__, line);
	Py_XDECREF(c);
	Py_XDECREF(cov);
	return NULL;
}

static PyObject *
pygsl_multifit2_linear_tvsd_or_w(const gsl_matrix *X, const gsl_vector *w, const gsl_vector *y, const double tol,
				 gsl_multifit_linear_workspace * self)
{

	PyObject * ret = NULL;
	PyArrayObject *c = NULL, *cov = NULL;
	gsl_vector_view c_v;
	gsl_matrix_view cov_m;
	double chisq;
	size_t rank;
	long long tmp;
	int line = __LINE__, status = PyGSL_ANY;
	
	FUNC_MESS_BEGIN();
	
	status = pygsl_multifit2_build_c_cov(self->p, &c, &c_v,  &cov, &cov_m);
	if(status != GSL_SUCCESS){
		line  = __LINE__ - 2;
		goto fail;
	}
	if(w){
		status = gsl_multifit_linear_tsvd(X, y, tol, &c_v.vector, &cov_m.matrix, &chisq, &rank, self);
		if(status != GSL_SUCCESS){
			line  = __LINE__ - 2;
			goto fail;
		}
	} else {
		status = gsl_multifit_wlinear_tsvd(X, w, y, tol, &c_v.vector, &cov_m.matrix, &chisq, &rank, self);
		if(status != GSL_SUCCESS){
			line  = __LINE__ - 2;
			goto fail;
		}
	}
	tmp = rank;
	ret = Py_BuildValue("OOdL", c, cov, chisq, tmp);
	FUNC_MESS_END();
	return ret;
		
  fail:
	FUNC_MESS_FAILED();
	PyGSL_add_traceback(pygsl_multifit2_module, __FILE__, __FUNCTION__, line);
	Py_XDECREF(c);
	Py_XDECREF(cov);
	return NULL;
}

static PyObject*
pygsl_multifit2_linear_stdform_12_or_w(const gsl_matrix * LQR, const gsl_vector * Ltau,
				       const gsl_matrix * X, const gsl_vector * w, const gsl_vector * y,
				       gsl_multifit_linear_workspace * self)
{
	PyObject * ret = NULL;
	PyArrayObject *Xs = NULL, *ys = NULL, *M = NULL;
	gsl_vector_view ys_v;
	gsl_matrix_view Xs_v, M_v;
	gsl_matrix *m_req = NULL;
	PyGSL_array_index_t dims[2] = {0,0}, dim = 0, dims_m[2] = {0,0};
	size_t m = 0, n = 0, p = 0;
	int line = __LINE__, status = PyGSL_ANY, stdform = 0, require_m = 0;
	
	FUNC_MESS_BEGIN();
	if(LQR){
		stdform = 2;
		m = LQR->size1;
		p = LQR->size2;
		n = y->size;
		if (m  >= p){
			dims[0] = n;
			dims[1] = p;
			dim = n;
		} else {
			size_t d0 = 0;
			require_m = 1;
			d0 = n - p + m;
			dims[0] = d0;
			dims[1] = m;
			dim =  d0;
			dims_m[0] = n;
			dims_m[1] = p;
		}
	} else {
		stdform = 1;
		dims[0] = X->size1;
		dims[1] = X->size2;
		dim = y->size;
	}

	
	status = pygsl_new_matrix(dims, &Xs, &Xs_v);
	if(status != GSL_SUCCESS){
		line  = __LINE__ - 2;
		goto fail;
	}

	status = pygsl_new_vector(dim, &ys, &ys_v);
	if(status != GSL_SUCCESS){
		line  = __LINE__ - 2;
		goto fail;
	}

	if(require_m){
		status = pygsl_new_matrix(dims_m, &M, &M_v);
		if(status != GSL_SUCCESS){
			line  = __LINE__ - 2;
			goto fail;
		}
		m_req = &M_v.matrix;
	}
	switch(stdform){
	case 1:
		if(w){
			status = gsl_multifit_linear_wstdform1(Ltau, X, w, y,
							       &Xs_v.matrix, &ys_v.vector, self);
			if(status != GSL_SUCCESS){
				line  = __LINE__ - 3;
				goto fail;
			}
		} else {
			status = gsl_multifit_linear_stdform1(Ltau, X, y,
							      &Xs_v.matrix, &ys_v.vector, self);
			if(status != GSL_SUCCESS){
				line  = __LINE__ - 3;
				goto fail;
			}
		}
		line  = __LINE__ + 1;
		ret = Py_BuildValue("OO", Xs, ys);
		break;
		
	case 2:
		if(w){
			status = gsl_multifit_linear_wstdform2(LQR, Ltau, X, w, y,
							       &Xs_v.matrix, &ys_v.vector, m_req,
							       self);
			if(status != GSL_SUCCESS){
				line  = __LINE__ - 4;
				goto fail;
			}	       	
		} else {
			status = gsl_multifit_linear_wstdform2(LQR, Ltau, X, w, y,
							       &Xs_v.matrix, &ys_v.vector, m_req,
							       self);
			if(status != GSL_SUCCESS){
				line  = __LINE__ - 4;
				goto fail;
			}
		}
		if (require_m){
			line  = __LINE__ + 1;
			ret = Py_BuildValue("OOO", Xs, ys, M);
		} else {
			line  = __LINE__ + 1;
			Py_INCREF(Py_None);
			ret = Py_BuildValue("OOO", Xs, ys, Py_None);
		}
		break;
	default:
		line = __LINE__;
		status = GSL_ESANITY;
		DEBUG_MESS(2, "Unknown stdform %d", stdform);
		pygsl_error("stdform neither 1 nor 2", __FILE__, line, status);
		goto fail;
	}

	if(!ret){
		goto fail;
	}
	FUNC_MESS_END();
	return ret;
		
  fail:
	FUNC_MESS_FAILED();
	PyGSL_add_traceback(pygsl_multifit2_module, __FILE__, __FUNCTION__, line);
	Py_XDECREF(Xs);
	Py_XDECREF(ys);
	Py_XDECREF(M);
	return NULL;
}

static PyObject *
pygsl_multifit_linear_solve(const double lambda, const gsl_matrix * Xs, const gsl_vector * ys,
			    gsl_multifit_linear_workspace * self)
{
	PyObject * ret = NULL;
	PyArrayObject *cs = NULL;
	size_t m = 0, p = 0, cs_n;
	int line = __LINE__, status = PyGSL_ANY;
	PyGSL_array_index_t dim = 0;
	double snorm = 0, rnorm = 0;
	gsl_vector_view cs_v;
	
	FUNC_MESS_BEGIN();
	p = self->p;

	/* XXX How do I determine m here? */
	m = self->p;
	cs_n = GSL_MIN(m, p);
	dim = cs_n;

	status = pygsl_new_vector(dim, &cs, &cs_v);
	if(status != GSL_SUCCESS){
		line  = __LINE__ - 2;
		goto fail;
	}
	
	status = gsl_multifit_linear_solve(lambda, Xs, ys, &cs_v.vector, &rnorm, &snorm, self);
	if(status != GSL_SUCCESS){
		line  = __LINE__ - 2;
		goto fail;
	}
	
	ret = Py_BuildValue("Odd", cs, rnorm, snorm);
	if(!ret){
		line  = __LINE__ - 2;
		goto fail;
	}
	cs = NULL;
	FUNC_MESS_END();
	return ret;
	
 fail:
	FUNC_MESS_FAILED();
	PyGSL_add_traceback(pygsl_multifit2_module, __FILE__, __FUNCTION__, line);
	Py_XDECREF(cs);
	Py_XDECREF(ret);	
	PyGSL_error_flag(status);
	return NULL;
}


static PyObject *
pygsl_multifit_linear_lcurve(const gsl_vector * y,  size_t n_points, gsl_multifit_linear_workspace * self)
{
	PyObject *ret = NULL;
	PyArrayObject *reg_param = NULL, *rho = NULL, *eta = NULL;
	gsl_vector_view reg_param_v, rho_v, eta_v;
	PyGSL_array_index_t  dim = 0;
	int line = __LINE__, status = PyGSL_ANY;
	
	FUNC_MESS_BEGIN();

	dim = n_points;

	status = pygsl_new_vector(dim, &reg_param, &reg_param_v);
	if(status != GSL_SUCCESS){
		line  = __LINE__ - 2;
		goto fail;
	}

	status = pygsl_new_vector(dim, &rho, &rho_v);
	if(status != GSL_SUCCESS){
		line  = __LINE__ - 2;
		goto fail;
	}

	status = pygsl_new_vector(dim, &eta, &eta_v);
	if(status != GSL_SUCCESS){
		line  = __LINE__ - 2;
		goto fail;
	}

	status = gsl_multifit_linear_lcurve(y, &reg_param_v.vector, &rho_v.vector, &eta_v.vector, self);
	ret = Py_BuildValue("OOO", reg_param, rho, eta);
	if(!ret){
		line  = __LINE__ - 2;
		goto fail;
	}
	reg_param = NULL;
	rho = NULL;
	eta = NULL;
	FUNC_MESS_END();
	return ret;

  fail:
	FUNC_MESS_FAILED();
	PyGSL_add_traceback(pygsl_multifit2_module, __FILE__, __FUNCTION__, line);
	Py_XDECREF(reg_param);
	Py_XDECREF(rho);
	Py_XDECREF(eta);
	Py_XDECREF(ret);
	PyGSL_error_flag(status);
	return NULL;
}


static PyObject *
pygsl_multifit_linear_gcv(const gsl_vector * y, gsl_vector * reg_param,
			  gsl_multifit_linear_workspace * self)
{

	PyObject *ret = NULL;
	PyArrayObject *G;
	gsl_vector_view G_v, rho_v, eta_v;
	PyGSL_array_index_t  dim = 0;
	int line = __LINE__, status = PyGSL_ANY;

	double G_lambda = 0.0, lambda = 0.0;
	FUNC_MESS_BEGIN();

	dim = reg_param->size;
	
	status = pygsl_new_vector(dim, &G, &G_v);
	if(status != GSL_SUCCESS){
		line  = __LINE__ - 2;
		goto fail;
	}
	status = gsl_multifit_linear_gcv(y, reg_param, &G_v.vector, &lambda, &G_lambda, self);
	if(status != GSL_SUCCESS){
		line  = __LINE__ - 2;
		goto fail;
	}
	ret = Py_BuildValue("Odd", G, lambda, G_lambda);
	if(!ret){
		line  = __LINE__ - 2;
		goto fail;
	}
	G = NULL;
	FUNC_MESS_END();
	return ret;

  fail:
	FUNC_MESS_FAILED();
	PyGSL_add_traceback(pygsl_multifit2_module, __FILE__, __FUNCTION__, line);
	Py_XDECREF(G);
	Py_XDECREF(ret);
	PyGSL_error_flag(status);
	return NULL;
}

static PyObject *
pygsl_multifit_linear_L_decomp(PyObject *L_o, int do_copy)
{
	PyArrayObject * L_a = NULL, *L_in = NULL, *tau = NULL;
	PyObject *ret = NULL;	
	gsl_matrix_view L_v;
	gsl_vector_view tau_v;
	PyGSL_array_index_t stride1 = 0, stride2 = 0, dim = 0;
	size_t m = 0, p = 0, tau_v_n = 0;
	int line = __LINE__, status = PyGSL_ANY;

	FUNC_MESS_BEGIN();
	
	L_in = PyGSL_matrix_check(L_o, -1, -1,
				 (do_copy) ? PyGSL_DARRAY_CINPUT(1) : PyGSL_DARRAY_CIO(1), 
				 &stride1, &stride2, NULL);
	if(L_in == NULL){
		line  = __LINE__ - 5;
		goto fail;
	}
	if(do_copy){
		L_a = PyGSL_Copy_Array(L_in);
	} else {
		L_a = L_in;
		L_in = NULL;
	}
	if(L_a == NULL){
		line  = __LINE__ - 1;
		goto fail;
	}
	L_v = gsl_matrix_view_array(PyArray_DATA(L_a), PyArray_DIM(L_a, 0),  PyArray_DIM(L_a, 1));

	m = L_v.matrix.size1;
	p = L_v.matrix.size2;
	tau_v_n = GSL_MIN(m, p);
	dim = tau_v_n;
	status = pygsl_new_vector(dim, &tau, &tau_v);
	if(status != GSL_SUCCESS){
		line  = __LINE__ - 2;
		goto fail;
	}
	
	status =  gsl_multifit_linear_L_decomp(&L_v.matrix, &tau_v.vector);
	if(status != GSL_SUCCESS){
		line  = __LINE__ - 2;
		goto fail;
	}

	ret = Py_BuildValue("OO", L_a, tau);
	if(!ret){
		line  = __LINE__ - 2;
		goto fail;
	}
	L_a = NULL;
	tau = NULL;
	FUNC_MESS_END();
	return ret;

  fail:
	FUNC_MESS_FAILED();
	PyGSL_add_traceback(pygsl_multifit2_module, __FILE__, __FUNCTION__, line);
	Py_XDECREF(L_in);
	Py_XDECREF(tau);
	Py_XDECREF(L_a);
	PyGSL_error_flag(status);
	return NULL;
}

